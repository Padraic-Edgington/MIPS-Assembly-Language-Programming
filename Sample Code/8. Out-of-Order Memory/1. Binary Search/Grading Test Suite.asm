
#############################################################################################
#                          Unit Tests for Binary Search Function							#
#																							#
#  Padraic Edgington                                                           6 Mar, 2013	#
#																							#
#                                            v. 1											#
#  If there are bugs in this code, you may check back later for an updated version.			#
#																							#
#  You should write your code in a seperate file and prepend it to this file by running		#
#  either:																					#
#  Windows: copy /Y <Search Function Name>.asm + "Program #7 - Test Suite.asm" <output>.asm	#
#  Unix:    cat <Search Function Name>.asm "Program #7 - Test Suite.asm" > <output>.asm		#
#																							#
#  v. 1		Initial release																	#
#############################################################################################


main:	addi	$sp, $sp, -4		#  Make space for $ra on stack
		sw		$ra, 0 ($sp)		#  Store the return address on the stack

		.data
t1:		.word	7, 1, 3, 5, 7, 9, 11, 13
t2:		.word	9, -6, -3, 1, 5, 6, 9, 14, 42, 76
t3:		.word	1024, -2147071544, -2146157775, -2139951181, -2134273733, -2134249692, -2126227205, -2124275262, -2120825847, -2106813059, -2103011957, -2100121242, -2093086021, -2092610062, -2092608349, -2089515575, -2089079861, -2077637819, -2072848945, -2072593782, -2065306710, -2059944979, -2059618476, -2054532388, -2052411973, -2050117803, -2046851360, -2043033361, -2041526542, -2034850512, -2032732228, -2029412982, -2026776240, -2012130787, -1997811073, -1995073876, -1994788460, -1994653380, -1989870640, -1981194422, -1977229152, -1976867694, -1974577213, -1974251708, -1973504645, -1972569846, -1971916202, -1970801477, -1970678116, -1969315523, -1962641642, -1957620627, -1952828331, -1939837674, -1928630794, -1920891810, -1909922140, -1909127129, -1908969786, -1907996378, -1904272331, -1889697600, -1887424796, -1884701596, -1875847344, -1873639790, -1872694204, -1867391146, -1862960144, -1861506485, -1860134596, -1854598858, -1843037746, -1840520301, -1839155934, -1829475260, -1829272678, -1828502893, -1820557391, -1802143706, -1798109909, -1794866567, -1789507459, -1782480423, -1772458183, -1769982777, -1764468408, -1754199844, -1753656842, -1753427381, -1750499365, -1733255880, -1732675725, -1731968902, -1728633628, -1724164328, -1721113565, -1714984874, -1692389630, -1691820180, -1690523318, -1690369191, -1679851923, -1675331075, -1674502609, -1668715901, -1652587065, -1651446937, -1650621661, -1646840114, -1646724691, -1645960493, -1643201372, -1641123954, -1639575300, -1638100135, -1633873800, -1627964709, -1627648561, -1620532319, -1617679652, -1616200941, -1615150074, -1607568878, -1607417088, -1592283320, -1589383484, -1589233561, -1586857400, -1583257133, -1579503555, -1569304719, -1565636576, -1556883667, -1553804259, -1546847937, -1537888525, -1537235170, -1532028337, -1528036078, -1527887399, -1525250702, -1524984797, -1516896003, -1516284181, -1507007387, -1495479311, -1492201266, -1489768179, -1487320954, -1481021466, -1476652145, -1472892608, -1472042192, -1471294401, -1468980090, -1468137014, -1465847230, -1464802601, -1464553890, -1459544989, -1451062206, -1449431846, -1442735993, -1441091443, -1441058483, -1437662580, -1437029790, -1434064643, -1433802439, -1431073050, -1416482732, -1410429159, -1407540843, -1400325910, -1395968411, -1395411499, -1388718424, -1383646612, -1372927629, -1363013866, -1355334909, -1354973338, -1347743017, -1346756133, -1344875298, -1344001736, -1337815042, -1332554509, -1320509663, -1315010767, -1314913731, -1298022979, -1297041646, -1293067754, -1291947718, -1291867832, -1289175346, -1288085107, -1285040059, -1280217358, -1274490812, -1265546186, -1261288144, -1261100451, -1254311942, -1253653944, -1250732387, -1248216743, -1243134019, -1240989211, -1239567166, -1239117103, -1238704216, -1237621245, -1237482812, -1235355279, -1229255020, -1228030105, -1226594565, -1225878084, -1220769824, -1216496334, -1214910706, -1204379600, -1202405434, -1201575252, -1198105820, -1195014216, -1194480622, -1182905222, -1180095233, -1174264300, -1163745700, -1163077982, -1160753919, -1157364805, -1153577340, -1152350256, -1147667488, -1137494784, -1131346666, -1130710602, -1127955207, -1124889740, -1122405384, -1113504939, -1110624916, -1109231355, -1108854283, -1100799058, -1098145198, -1094242830, -1090072899, -1089593959, -1087622524, -1083661067, -1079114007, -1070713157, -1063992687, -1056496605, -1052658559, -1039286699, -1038417444, -1038406980, -1034081188, -1031179632, -1030040793, -1029281238, -995217554, -991743077, -991088710, -989533335, -988866415, -986949956, -984925721, -978104659, -969485016, -969128766, -968765865, -964210168, -963106945, -957338815, -953768581, -953726028, -953630435, -951153580, -949558012, -946572856, -945740715, -939702954, -935793126, -935779659, -934734716, -932749006, -924607106, -923356158, -923029575, -922850412, -922772894, -920831805, -918997051, -917113784, -917055057, -916990051, -906218373, -899940975, -894320103, -891366487, -890215809, -890082138, -888376474, -887965418, -886060490, -881935079, -877942825, -876804921, -875156952, -870323911, -867916523, -862240763, -857300938, -855163558, -852001128, -839291607, -835783336, -831056944, -825930217, -814665773, -813005160, -810141774, -803840256, -803737723, -801825753, -795064354, -788672402, -788451052, -786947112, -786569280, -784561419, -780352187, -778060795, -770385913, -766658183, -764321607, -763937836, -761204710, -756105491, -755383808, -745641994, -744131173, -743698761, -743485055, -739172382, -738610529, -737133359, -727641223, -727174014, -726215668, -725731232, -720925871, -719811344, -717143366, -715942206, -714621884, -709857813, -706940477, -698389847, -681903272, -679970639, -675954812, -664107659, -658688726, -657748938, -651271598, -649870187, -649188660, -641329932, -640777229, -639848152, -637321497, -629383828, -627306174, -627124144, -622682281, -619203230, -610445806, -605825418, -603104876, -597354781, -593107904, -585790258, -581025596, -580566374, -577153258, -574756454, -573605403, -570873826, -567838631, -565170416, -565047795, -557672085, -550776762, -550349675, -541104792, -528755146, -525924526, -514471874, -512083935, -510323352, -509205225, -506920971, -506785252, -504545241, -503262637, -502807176, -497721040, -496039914, -494467805, -493898415, -485270271, -484659055, -483688834, -482704021, -467593257, -455621934, -443531017, -436077517, -432775934, -420557374, -409973338, -407013239, -404538233, -400088528, -391447008, -389720661, -387842140, -378884272, -375014672, -371449326, -368589247, -360777775, -360713537, -360279792, -352388339, -346502252, -340890690, -332137670, -326059249, -324060825, -314787445, -305353343, -301944419, -298426282, -296846217, -291639973, -287603786, -287381136, -282007367, -273231844, -267599393, -265443048, -265273563, -256224470, -255329330, -242303360, -230363637, -228060286, -220826177, -219115784, -218164816, -216179364, -201030036, -199527317, -198069036, -193597246, -190916900, -190170604, -187666261, -184327456, -181373259, -178018975, -163387738, -163360559, -161123065, -160603665, -154708641, -148898453, -148054226, -131524097, -115710211, -107230662, -99359733, -85799924, -84650843, -82152831, -82072326, -64024298, -59364231, -56787935, -53541841, -44693414, -41862739, -35069756, -33673252, -32343104, -30122380, -20928681, -11934063, -11064474, -9984361, -7827480, -4033406, -2110380, -2034216, 1073839, 7636789, 9055729, 13887765, 17084333, 28566252, 30084166, 33304936, 37879558, 42670911, 50953535, 56558544, 57355987, 74539975, 87651116, 90390016, 94687021, 100602741, 101050052, 105622857, 112252926, 113242357, 113995187, 114777545, 125753755, 128490357, 130356650, 140754167, 142578355, 150684895, 152017013, 152112058, 154249616, 158332807, 160722663, 167522376, 178175659, 180527770, 186529857, 188074317, 198749844, 198769522, 200274097, 207036082, 211880652, 215968520, 220701650, 223950412, 224898482, 225684598, 246832728, 248988111, 250378269, 254185979, 257777076, 266033703, 266867533, 268830360, 269072378, 269966252, 277763586, 281458735, 283034558, 286242900, 295035953, 302436891, 303505483, 304754275, 308176090, 310281170, 312822728, 312936130, 314176889, 315421373, 316670611, 321182353, 324806067, 334691897, 337072564, 341670719, 341795141, 347703279, 349961032, 350845053, 350910601, 355642145, 361301181, 362234156, 363136592, 363976120, 367040511, 370413632, 372847709, 373993639, 374100253, 388618876, 389936193, 394432056, 394550850, 396072989, 419274206, 420067866, 421542850, 424476355, 427125659, 437611701, 442942697, 447212163, 447458027, 449226294, 460196852, 468844464, 477046426, 486586963, 489306665, 491269657, 500727351, 500963211, 505585754, 506638155, 525328917, 527792572, 528018288, 530027902, 536318325, 546177829, 549536499, 554730358, 557136361, 562585328, 563269281, 564929546, 565602854, 569029796, 571653166, 578848526, 578915297, 586217310, 592264489, 593230942, 604490212, 611619631, 614822572, 629577870, 631596202, 633726173, 637144400, 641814761, 645351481, 658699819, 664548902, 667945179, 674337096, 675678546, 676764765, 678068969, 678715088, 681073659, 683012156, 689128388, 705258893, 725633141, 726223056, 734771685, 735255465, 735861059, 736562662, 743917836, 744192370, 746516661, 747273957, 753937406, 755993425, 758566080, 762012623, 765460462, 771361748, 772470279, 775986230, 780349063, 781477153, 781576281, 787984702, 789586853, 790131292, 794725144, 800341641, 803185936, 804646316, 804904386, 806669383, 816648775, 820242909, 821348673, 822059867, 825140914, 829613207, 834075061, 836657553, 847202265, 850991343, 853299114, 854777807, 857890368, 859474495, 860423718, 860757803, 864441540, 865275198, 870635873, 871040163, 877624554, 880414402, 884862908, 888063953, 894695004, 904016717, 908202274, 908917276, 919279000, 922982460, 927098460, 945834669, 946183933, 946979886, 947528907, 948328240, 950422373, 955697805, 975963350, 978942573, 979144237, 981016607, 988885471, 990164480, 1001927094, 1003233114, 1010939382, 1029352733, 1033190229, 1034020264, 1040470160, 1041046135, 1045010491, 1045558574, 1047053830, 1063305342, 1064892772, 1068698284, 1069119222, 1070118630, 1071953403, 1077597088, 1078548606, 1090404329, 1091375739, 1094225558, 1100436279, 1101804820, 1103562767, 1104137642, 1104985157, 1109863328, 1111028388, 1114595358, 1114863797, 1116562887, 1118172394, 1127786001, 1128359579, 1128575466, 1129029736, 1131385020, 1157563946, 1158163327, 1161679484, 1166365552, 1167446730, 1171727980, 1175685399, 1184069822, 1185556641, 1186270608, 1191420956, 1191957414, 1193467712, 1198529401, 1200937601, 1205254585, 1205870756, 1215751045, 1216199867, 1217716121, 1219039514, 1222420918, 1223319334, 1225943621, 1227774824, 1228026268, 1229007963, 1232342342, 1234994787, 1235233343, 1235487669, 1240758160, 1247500738, 1249088385, 1249751105, 1253051929, 1254549356, 1255789287, 1257324636, 1273385972, 1274600369, 1275162816, 1276056752, 1279857832, 1288467611, 1288558083, 1291533463, 1294979669, 1303194166, 1309179303, 1310317854, 1325555048, 1329892616, 1329960799, 1332110941, 1333718913, 1335401093, 1339965000, 1353136139, 1359584120, 1360381486, 1361507145, 1363271078, 1364828348, 1378619663, 1381679779, 1385450594, 1392360403, 1403601752, 1404166316, 1409751402, 1412535194, 1413475797, 1425389196, 1431760441, 1435286098, 1439591408, 1443899064, 1444930279, 1452005258, 1457988276, 1474827040, 1475584955, 1476080952, 1483426196, 1497338125, 1511011541, 1520195389, 1520951990, 1529768389, 1535497010, 1537348827, 1541682359, 1555574049, 1555770904, 1560596676, 1563137348, 1566488352, 1576556523, 1577889182, 1583761762, 1586666379, 1588526078, 1598501076, 1599412846, 1601741596, 1602712035, 1602977220, 1604103884, 1609399619, 1611254503, 1618600250, 1633012431, 1636797501, 1644147624, 1649319944, 1653863133, 1654544724, 1656016234, 1657848984, 1661454733, 1663094463, 1663733971, 1665870563, 1672773492, 1681618985, 1681849672, 1691268105, 1694757183, 1698622741, 1700215583, 1701066037, 1707537043, 1714292212, 1716543028, 1716551606, 1718378202, 1721173678, 1729447649, 1729810791, 1729949323, 1739535876, 1746361319, 1746888271, 1756284627, 1756360543, 1761594045, 1763988213, 1765680277, 1768934064, 1779567885, 1782231829, 1794971636, 1805272988, 1812984601, 1816660702, 1829668776, 1830720677, 1830809043, 1837265416, 1840177440, 1847263294, 1852384677, 1855854724, 1856287253, 1875803225, 1877264374, 1878759843, 1879274691, 1881176626, 1885945103, 1892612984, 1892740917, 1893433651, 1897386667, 1898329708, 1898692192, 1902652464, 1904558184, 1908844540, 1910806179, 1922707457, 1925356403, 1926697291, 1934749011, 1937194892, 1941800223, 1941807482, 1944201130, 1946468041, 1947307958, 1957400381, 1962617717, 1962666710, 1963711766, 1966689481, 1976120064, 1976233741, 1979855811, 1981059467, 1982839159, 1989964616, 2005577300, 2006864675, 2016187695, 2019388652, 2022730805, 2025817426, 2026873438, 2030404657, 2030522753, 2033151304, 2036147813, 2037904983, 2040525958, 2046271241, 2057501468, 2060318701, 2067806155, 2069832336, 2074623641, 2080435695, 2080537739, 2088833463, 2088879880, 2093005006, 2106609220, 2111543209, 2117925252, 2118693299, 2121644059, 2121869254, 2123740404, 2136482547, 2138106664, 2138924913, 2139277356
b1:		.word	0
b2:		.word	-5, 5, 10, 15, 20, 25
b3:		.word	7, 0, -5, -4, -3, -2, -1, 0
b4:		.word	7, 0, -2, -1, 0, 1, 2, 0
		.text

###############################################################################
##                      Testing binary search function                       ##
###############################################################################
		#  Test #1
		#  Tree #1, 7 tests for seven elements
		#######################################################################
		jal		setSavedRegisters
		addi	$sp, $sp, -12
		la		$a0, t1				#  Tree
		li		$t0, 1
		lw		$t1, 0 ($a0)
		sw		$t0, 0 ($sp)		#  Iterator
		sw		$t1, 4 ($sp)		#  Length
		sw		$zero, 8 ($sp)		#  Correct answer counter
		
T1Loop:	bgt		$t0, $t1, T1End		#  Check each element in the tree.
		la		$a0, t1				#  Tree
		sll		$t0, $t0, 2
		add		$t2, $a0, $t0
		lw		$a1, 0 ($t2)		#  Query
		jal		Binary_Search
		
		move	$a0, $v0			#  Result
		lw		$a1, 0 ($sp)		#  Expected result
		jal		CheckEquality		#  Check for equality quietly.
		
		lw		$t0, 0 ($sp)		#  Iterator
		lw		$t1, 4 ($sp)		#  Length
		lw		$t2, 8 ($sp)		#  Correct answer counter
		
		addi	$t0, $t0, 1			#  Increment the iterator
		add		$t2, $t2, $v0		#  Increment the counter if the test was successful.
		
		sw		$t0, 0 ($sp)
		sw		$t2, 8 ($sp)
		
		j		T1Loop
		
T1End:	li		$a0, 1				#  Test #1
		move	$a1, $t2			#  Correct answers
		move	$a2, $t1			#  Number of subtests
		jal		PrintResults		#  Display the results
		
		addi	$sp, $sp, 12
		

		#  Test #2
		#  Tree #1, search for 10
		#######################################################################
		jal		setSavedRegisters
		la		$a0, t1				#  Tree
		li		$a1, 10				#  Query
		jal		Binary_Search
		
		move	$a0, $v0			#  Result
		li		$a1, 0				#  Expected result
		li		$a3, 2				#  Test #2
		jal		assertEqual			#  Check for equality
		

		#  Test #3
		#  Tree #1, search for 15
		#######################################################################
		jal		setSavedRegisters
		la		$a0, t1				#  Tree
		li		$a1, 15				#  Query
		jal		Binary_Search
		
		move	$a0, $v0			#  Result
		li		$a1, 0				#  Expected result
		li		$a3, 3				#  Test #3
		jal		assertEqual			#  Check for equality
		

		#  Test #4
		#  Tree #2, 9 tests for 9 elements
		#######################################################################
		jal		setSavedRegisters
		addi	$sp, $sp, -12
		la		$a0, t2				#  Tree
		li		$t0, 1
		lw		$t1, 0 ($a0)
		sw		$t0, 0 ($sp)		#  Iterator
		sw		$t1, 4 ($sp)		#  Length
		sw		$zero, 8 ($sp)		#  Correct answer counter
		
T4Loop:	bgt		$t0, $t1, T4End		#  Check each element in the tree.
		la		$a0, t2				#  Tree
		sll		$t0, $t0, 2
		add		$t2, $a0, $t0
		lw		$a1, 0 ($t2)		#  Query
		jal		Binary_Search
		
		move	$a0, $v0			#  Result
		lw		$a1, 0 ($sp)		#  Expected result
		jal		CheckEquality		#  Check for equality quietly.
		
		lw		$t0, 0 ($sp)		#  Iterator
		lw		$t1, 4 ($sp)		#  Length
		lw		$t2, 8 ($sp)		#  Correct answer counter
		
		addi	$t0, $t0, 1			#  Increment the iterator
		add		$t2, $t2, $v0		#  Increment the counter if the test was successful.
		
		sw		$t0, 0 ($sp)
		sw		$t2, 8 ($sp)
		
		j		T4Loop
		
T4End:	li		$a0, 4				#  Test #5
		move	$a1, $t2			#  Correct answers
		move	$a2, $t1			#  Number of subtests
		jal		PrintResults		#  Display the results
		
		addi	$sp, $sp, 12
		

		#  Test #5
		#  Tree #2, search for -2
		#######################################################################
		jal		setSavedRegisters
		la		$a0, t2				#  Tree
		li		$a1, -2				#  Query
		jal		Binary_Search
		
		move	$a0, $v0			#  Result
		li		$a1, 0				#  Expected result
		li		$a3, 5				#  Test #5
		jal		assertEqual			#  Check for equality
		

		#  Test #6
		#  Tree #2, search for -76
		#######################################################################
		jal		setSavedRegisters
		la		$a0, t2				#  Tree
		li		$a1, -76			#  Query
		jal		Binary_Search
		
		move	$a0, $v0			#  Result
		li		$a1, 0				#  Expected result
		li		$a3, 6				#  Test #6
		jal		assertEqual			#  Check for equality
		

		#  Test #7
		#  Tree #3, 1024 tests for 1024 elements
		#######################################################################
		jal		setSavedRegisters
		addi	$sp, $sp, -12
		la		$a0, t3				#  Tree
		li		$t0, 1
		lw		$t1, 0 ($a0)
		sw		$t0, 0 ($sp)		#  Iterator
		sw		$t1, 4 ($sp)		#  Length
		sw		$zero, 8 ($sp)		#  Correct answer counter
		
T7Loop:	bgt		$t0, $t1, T7End		#  Check each element in the tree.
		la		$a0, t3				#  Tree
		sll		$t0, $t0, 2
		add		$t2, $a0, $t0
		lw		$a1, 0 ($t2)		#  Query
		jal		Binary_Search
		
		move	$a0, $v0			#  Result
		lw		$a1, 0 ($sp)		#  Expected result
		jal		CheckEquality		#  Check for equality quietly.
		
		lw		$t0, 0 ($sp)		#  Iterator
		lw		$t1, 4 ($sp)		#  Length
		lw		$t2, 8 ($sp)		#  Correct answer counter
		
		addi	$t0, $t0, 1			#  Increment the iterator
		add		$t2, $t2, $v0		#  Increment the counter if the test was successful.
		
		sw		$t0, 0 ($sp)
		sw		$t2, 8 ($sp)
		
		j		T7Loop
		
T7End:	li		$a0, 7				#  Test #7
		move	$a1, $t2			#  Correct answers
		move	$a2, $t1			#  Number of subtests
		jal		PrintResults		#  Display the results
		
		addi	$sp, $sp, 12
		

		#  Test #8
		#  Tree #3, search for 42
		#######################################################################
		jal		setSavedRegisters
		la		$a0, t3				#  Tree
		li		$a1, 42				#  Query
		jal		Binary_Search
		
		move	$a0, $v0			#  Result
		li		$a1, 0				#  Expected result
		li		$a3, 8				#  Test #8
		jal		assertEqual			#  Check for equality
		

		#  Test #9
		#  Check for non-linear search implementation #1
		#######################################################################
		jal		setSavedRegisters
		la		$a0, b3				#  Tree
		li		$a1, 0				#  Query
		jal		Binary_Search
		
		move	$a0, $v0			#  Result
		li		$a1, 7				#  Expected result
		li		$a3, 9				#  Test #9
		jal		assertEqual			#  Check for equality
		

		#  Test #10
		#  Check for non-linear search implementation #2
		#######################################################################
		jal		setSavedRegisters
		la		$a0, b4				#  Tree
		li		$a1, 0				#  Query
		jal		Binary_Search
		
		move	$a0, $v0			#  Result
		li		$a1, 4				#  Expected result
		li		$a3, 10				#  Test #10
		jal		assertEqual			#  Check for equality
		
		
		#  Test #11
		#  Null pointer for tree
		#######################################################################
		jal		setSavedRegisters
		li		$a0, 0				#  Tree
		li		$a1, 42				#  Query
		jal		Binary_Search
		
		move	$a0, $v0			#  Result
		li		$a1, -1				#  Expected result
		li		$a3, 11				#  Test #11
		jal		assertEqual			#  Check for equality
		

		#  Test #12
		#  Tree out of memory bounds
		#######################################################################
		jal		setSavedRegisters
		li		$a0, -42			#  Tree
		li		$a1, 42				#  Query
		jal		Binary_Search
		
		move	$a0, $v0			#  Result
		li		$a1, -1				#  Expected result
		li		$a3, 12				#  Test #12
		jal		assertEqual			#  Check for equality
		

		#  Test #13
		#  Tree at top of memory
		#######################################################################
		jal		setSavedRegisters
		li		$a0, 0x7FFFFFFF		#  Tree
		li		$a1, 42				#  Query
		jal		Binary_Search
		
		move	$a0, $v0			#  Result
		li		$a1, -1				#  Expected result
		li		$a3, 13				#  Test #13
		jal		assertEqual			#  Check for equality
		

		#  Test #14
		#  Tree too big for memory
		#######################################################################
		addi	$sp, $sp, -4
		li		$t0, 86597
		sw		$t0, 0 ($sp)
		jal		setSavedRegisters
		move	$a0, $sp			#  Tree
		li		$a1, 42				#  Query
		jal		Binary_Search
		
		move	$a0, $v0			#  Result
		li		$a1, -1				#  Expected result
		li		$a3, 14				#  Test #14
		jal		assertEqual			#  Check for equality
		addi	$sp, $sp, 4
		

		#  Test #15
		#  Tree empty
		#######################################################################
		jal		setSavedRegisters
		la		$a0, b1				#  Tree
		li		$a1, 42				#  Query
		jal		Binary_Search
		
		move	$a0, $v0			#  Result
		li		$a1, -1				#  Expected result
		li		$a3, 15				#  Test #15
		jal		assertEqual			#  Check for equality
		

		#  Test #16
		#  Bad tree size
		#######################################################################
		jal		setSavedRegisters
		la		$a0, b2				#  Tree
		li		$a1, 42				#  Query
		jal		Binary_Search
		
		move	$a0, $v0			#  Result
		li		$a1, -1				#  Expected result
		li		$a3, 16				#  Test #16
		jal		assertEqual			#  Check for equality
		

		#  Test #17
		#  Object not word aligned
		#######################################################################
		jal		setSavedRegisters
		li		$a0, 0x2004002		#  Tree
		li		$a1, 1				#  Query
		jal		Binary_Search
		
		move	$a0, $v0			#  Result
		li		$a1, -1				#  Expected result
		li		$a3, 17				#  Test #17
		jal		assertEqual			#  Check for equality

		
		#  Completed Tests
		#######################################################################
		lw		$ra, 0 ($sp)		#  Load return address
		addi	$sp, $sp, 4			#  Pop the stack
		jr		$ra

		
###############################################################################
##                            Assertion functions                            ##
###############################################################################
		#  Assert Equality
		#######################################################################
assertEqual:
		.data
eq1:	.asciiz	"Test #"
eq2:	.asciiz " failed:  Expected result:  "
eq3:	.asciiz	" \tObserved result:  "
eq4:	.asciiz "\n"
		.text
		
		addi	$sp, $sp, -12		#  Make space for four variables on the stack
		sw		$a0,  8 ($sp)		#  Store the result index
		sw		$a1,  4 ($sp)		#  Store the expected index
		sw		$a3,  0 ($sp)		#  Store the test number
		
		li		$v0, 4
		la		$a0, eq1
		syscall						#  Print "Test #"
		
		li		$v0, 1
		lw		$a0,  0 ($sp)
		syscall						#  Print test number
		
		lw		$t0,  8 ($sp)		#  Load the result index
		lw		$t1,  4 ($sp)		#  Load the expected index
		#  If the result matches the expected value, then the test is successful.
		beq		$t0, $t1, checkSavedRegisters
		
		#  Otherwise, it failed.
		
		li		$v0, 4
		la		$a0, eq2
		syscall						#  Print " failed:  Expected result:  "
		
		li		$v0, 1
		lw		$a0, 4 ($sp)
		syscall						#  Print expected result
		
		li		$v0, 4
		la		$a0, eq3
		syscall						#  Print " \tObserved result:  "
		
		li		$v0, 1
		lw		$a0, 8 ($sp)
		syscall						#  Print observed result
		
		li		$v0, 4
		la		$a0, eq4
		syscall						#  Add a new line
		
		addi	$sp, $sp, 12		#  Pop the stack
		jr		$ra					#  Return to caller
		#######################################################################
		
		
		#  Check Saved Registers
		#######################################################################
checkSavedRegisters:
		bne		$s0, 14, regFail
		bne		$s1, 73, regFail
		bne		$s2, 69, regFail
		bne		$s3, 46, regFail
		bne		$s4, 79, regFail
		bne		$s5, 92, regFail
		bne		$s6, 37, regFail
		bne		$s7, 96, regFail
		j		Pass

regFail:
		.data
rf:		.asciiz	" has changed the saved registers.\n"
		.text
		li		$v0, 4
		la		$a0, rf
		syscall
		
		addi	$sp, $sp, 12		#  Pop the stack
		jr		$ra					#  Return to caller
		#######################################################################
		

		#  Assertion Success
		#######################################################################
		.data
s1:		.asciiz	" passed.\n"
		.text
Pass:	li		$v0, 4				#  Print string
		la		$a0, s1				#  " passed.\n"
		syscall
		
		addi	$sp, $sp, 12		#  Pop the stack
		
		jr		$ra					#  Return to caller
		#######################################################################


		#  Set Saved Registers
		#######################################################################
setSavedRegisters:
		li		$s0, 14
		li		$s1, 73
		li		$s2, 69
		li		$s3, 46
		li		$s4, 79
		li		$s5, 92
		li		$s6, 37
		li		$s7, 96
		jr		$ra
		#######################################################################


		
		
		#  Check for equality quietly
		#
		#  This function provides the same functionality as AssertEqual, but
		#  returns 1 if the two values are equal and 0 if they are not equal.
		#
		#  Parameters:
		#    $a0:  The observed answer
		#    $a1:  The expected answer
		#  Results:
		#    $v0:  1 if equal, 0 if not equal
		#######################################################################
CheckEquality:
		#  If the result matches the expected value, then the test is successful.
		beq		$a0, $a1, CEPass
		#  Otherwise, it failed.
		li		$v0, 0				#  $v0 = false
		jr		$ra					#  Return to caller
CEPass:	li		$v0, 1				#  $v0 = true
		jr		$ra					#  Return to caller
		#######################################################################

		
		
		#  Print the results of a batch of tests
		#
		#  This function displays the results of a series of tests.
		#
		#  Parameters:
		#    $a0:  Test #
		#    $a1:  Number of passed tests
		#    $a2:  Number of tests run
		#######################################################################
		.data
PRt1:	.asciiz	"Test #"
PRt2:	.asciiz ":  "
PRt3:	.asciiz " of "
PRt4:	.asciiz	" elements located correctly.\n"
		.text
PrintResults:
		addi	$sp, $sp, -12
		sw		$a0, 0 ($sp)
		sw		$a1, 4 ($sp)
		sw		$a2, 8 ($sp)
		
		li		$v0, 4
		la		$a0, PRt1
		syscall
		
		li		$v0, 1
		lw		$a0, 0 ($sp)
		syscall
		
		li		$v0, 4
		la		$a0, PRt2
		syscall
		
		li		$v0, 1
		lw		$a0, 4 ($sp)
		syscall
		
		li		$v0, 4
		la		$a0, PRt3
		syscall
		
		li		$v0, 1
		lw		$a0, 8 ($sp)
		syscall
		
		li		$v0, 4
		la		$a0, PRt4
		syscall
		
		addi	$sp, $sp, 12
		jr		$ra